// single-level discriminated union
type Currency =
| LocalCurrency
| AUD | NZD | USD | EUR | JPY
checkJsonRoundTrip AUD "Single-Level Discriminated Union"

// two-level discriminated union
type AccountClassification =
| AssetAccount of AssetAccountType
and AssetAccountType =
| Asset
| Bank
| AccountsReceivable

checkJsonRoundTrip (AssetAccount Bank) "Multi-Level Discriminated Union"

// class
type CFoo(integerValue : int) =
  member this.IntegerValue = integerValue
  override this.GetHashCode() = hash this.IntegerValue
  override this.Equals(other) =
    match other with
    | :? CFoo as _other -> this.IntegerValue = _other.IntegerValue
    | _ -> false

checkJsonRoundTrip (new CFoo(23)) "Class"

// tuple
checkJsonRoundTrip ("Hello", 42) "Tuple"

// record with list property
type Foo = {
  Name : string
  Children : Foo list
}
checkJsonRoundTrip {
  Name = "Root"; Children = [
    {Name = "1"; Children=[]};
    {Name = "2"; Children=[]};
  ]
}// "record with list property"

// record with sequence property
type Bar = {Name : string; Children : int seq}
checkJsonRoundTrip {
  Name = "Daniel";
  Children = [23;86;]
}// "record with sequence property"

// record with set property
type FooSet = {
  Name : string
  Friends : string Set
}
checkJsonRoundTrip {
  Name = "Daniel";
  Friends = ([ "Joe";"Sally"; "Shawn"] |> Set.ofSeq)}// "record with set property"

// record with map property
type FooMap = {
  Name : string
  FriendsAndNicknames : Map<string, string>
}
checkJsonRoundTrip {
  Name = "Daniel";
  FriendsAndNicknames = ([
    ("Joe", "Chumpy");
    ("Sally", "Sal");
    "Shawn", "Wally"] |> Map.ofSeq)}
  // "record with map property"

// record with dict property
type FooDict = {
  Name : string
  FriendsAndNicknames : IDictionary<string, string>
}
checkJsonRoundTrip {
  Name = "Daniel";
  FriendsAndNicknames = ([ ("Joe", "Chumpy"); ("Sally", "Sal"); "Shawn", "Wally"] |> dict)}
  //"record with dict property"

